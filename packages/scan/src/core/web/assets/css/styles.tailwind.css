@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  outline: none !important;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  backface-visibility: hidden;

  /* WebKit (Chrome, Safari, Edge) specific scrollbar styles */
  &::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }

  &::-webkit-scrollbar-track {
    border-radius: 10px;
    background: transparent;
  }

  &::-webkit-scrollbar-thumb {
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.3);
  }

  &::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, .4);
  }
}

@-moz-document url-prefix() {
  * {
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.4) transparent;
    scrollbar-width: 6px;
  }
}


button {
  @apply hover:bg-none;
  @apply outline-none;
  @apply border-none;
  @apply transition-colors duration-150 ease-linear;
  @apply cursor-pointer;
}

/*
  Using CSS content with data attributes is more performant than:
  1. React re-renders with JSX text content
  2. Direct DOM manipulation methods:
     - element.textContent (creates/updates text nodes, triggers repaint)
     - element.innerText (triggers reflow by computing styles & layout)
     - element.innerHTML (heavy parsing, triggers reflow, security risks)
  3. Multiple data attributes with complex CSS concatenation

  This approach:
  - Avoids React reconciliation
  - Uses browser's native CSS engine (optimized content updates)
  - Minimizes main thread work
  - Reduces DOM operations
  - Avoids forced reflows (layout recalculation)
  - Only triggers necessary repaints
  - Keeps pseudo-element updates in render layer
*/
.with-data-text {
  overflow: hidden;
  &::before {
    content: attr(data-text);
    @apply block;
    @apply truncate;
  }
}

#react-scan-toolbar {
  @apply fixed left-0 top-0;
  @apply flex flex-col;
  @apply rounded-lg shadow-lg;
  @apply font-mono text-[13px] text-white;
  @apply bg-black;
  @apply select-none;
  @apply cursor-move;
  @apply opacity-0;
  @apply z-[999999999];
  @apply animate-fade-in animation-duration-300 animation-delay-300;
  @apply shadow-[0_4px_12px_rgba(0,0,0,0.2)];
}


/* HEADER */
.react-scan-header {
  @apply flex items-center gap-x-2;
  @apply pl-3 pr-2;
  @apply min-h-9;
  @apply rounded-t-lg;
  @apply border-b-1 border-white/10;
  @apply whitespace-nowrap overflow-hidden;
}

.react-scan-replay-button,
.react-scan-close-button {
  @apply flex items-center;
  @apply p-1;
  @apply min-w-fit;
  @apply rounded;
  @apply transition-colors duration-150;
}

.react-scan-replay-button {
  @apply relative;
  @apply overflow-hidden;
  @apply !bg-purple-500/50;

  &:hover {
    @apply bg-purple-500/25;
  }

  &.disabled {
    @apply opacity-50;
    @apply pointer-events-none;
  }

  &:before {
    content: '';
    @apply absolute;
    @apply inset-0;
    @apply -translate-x-full;
    animation: shimmer 2s infinite;
    background: linear-gradient(to right,
      transparent,
      rgba(142, 97, 227, 0.3),
      transparent);
  }
}

.react-scan-close-button {
  @apply bg-white/10;

  &:hover {
    @apply bg-white/15;
  }
}

@keyframes shimmer {
  100% {
    transform: translateX(100%);
  }
}

/* pivanov */


.react-scan-inspector {
  font-size: 13px;
  color: #fff;
  width: 100%;
}

.react-scan-section {
  @apply flex flex-col py-1;
  @apply py-2 px-4;
  @apply bg-black text-[#888];
  @apply before:content-[attr(data-section)] before:text-gray-500;

  > div {
    @apply min-h-6 ml-2;
  }
}

.react-scan-property {
  @apply relative;
  @apply flex flex-col;
  @apply pt-1 pl-6;
  @apply border-l-1 border-transparent;
  @apply overflow-hidden;
}

.react-scan-key {
  color: #fff;
}

.react-scan-warning {
  padding-right: 4px;
}

.react-scan-string {
  color: #9ecbff;
}

.react-scan-number {
  color: #79c7ff;
}

.react-scan-boolean {
  color: #56b6c2;
}

.react-scan-input {
  background: #000;
  border: none;
  color: #fff;
}

.react-scan-object-key {
  color: #fff;
}

.react-scan-array {
  color: #fff;
}

.react-scan-expandable {
  display: flex;
  align-items: flex-start;
}

.react-scan-arrow {
  @apply absolute top-2 left-6;
  @apply cursor-pointer;
  @apply w-6 h-6;
  @apply -translate-x-full;
  @apply z-10;

  &:before {
    content: 'â–¶';
    @apply absolute inset-0;
    @apply flex items-center justify-center;
    @apply text-[#888];
    @apply text-[8px];
    @apply origin-center;
    @apply transition-transform duration-150;
  }
}

.react-scan-expanded > .react-scan-arrow:before {
  transform: rotate(90deg);
}

.react-scan-property-content {
  @apply flex-1 flex flex-col;
  @apply pt-1;
  @apply max-w-full;
  @apply overflow-hidden;
}

.react-scan-hidden {
  display: none;
}

.react-scan-array-container {
  overflow-y: auto;
  @apply ml-5;
  margin-top: 8px;
  border-left: 1px solid rgba(255, 255, 255, 0.1);
  padding-left: 8px;
}

.react-scan-nested-object {
  /* @apply ml-5; */
  border-left: 1px solid rgba(255, 255, 255, 0.1);
}

.react-scan-preview-line {
  @apply relative;
  @apply flex items-center min-h-6;
}

.react-scan-flash-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(142, 97, 227, 1);
  pointer-events: none;
  opacity: 0;
  z-index: 999999;
  mix-blend-mode: multiply;
  transition: opacity 150ms ease-in;
  border-radius: 4px;
}

.react-scan-flash-active {
  opacity: 0.4;
  transition: opacity 300ms ease-in-out;
}

#react-scan-toolbar button:hover {
  background: rgba(255, 255, 255, 0.1);
}

#react-scan-toolbar button:active {
  background: rgba(255, 255, 255, 0.15);
}

#react-scan-toolbar button:focus-visible {
  outline: 2px solid #0070f3;
  outline-offset: -2px;
}

.nav-button {
  opacity: var(--nav-opacity, 1);
}

.react-scan-toolbar {
  border: 1px solid blue;
}
